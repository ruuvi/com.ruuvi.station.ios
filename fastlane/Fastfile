fastlane_require 'plist'
fastlane_require 'fileutils'

default_platform(:ios)

before_all do
  sh("rm", "-rf", "com.ruuvi.station.ios.keystore")
  sh("git", "clone", "git@github.com:ruuvi/com.ruuvi.station.ios.keystore.git")
  ENV["GSP_PATH"] = "./fastlane/com.ruuvi.station.ios.keystore/GoogleService-Info.plist"
  ENV["GOOGLE_APP_ID"] = get_info_plist_value(path: ENV["GSP_PATH"], key: "GOOGLE_APP_ID")
  ENV["FIREBASE_REFRESH_TOKEN"] = get_info_plist_value(path: "./fastlane/com.ruuvi.station.ios.keystore/CI.plist", key: "FIREBASE_REFRESH_TOKEN")
end

def remove_artifacts
  clean_build_artifacts()
  begin
      sh("rm", "-rf", "com.ruuvi.station.ios.keystore")
      sh("rm", "report.xml")
      sh("rm", "README.md")
   rescue => ex
     UI.error(ex)
   end
end

platform :ios do
  def install_pods
    cocoapods(
      podfile: "Podfile",
      try_repo_update_on_error: true
    )
  end

  lane :test do
    install_pods()
    scan(
      scheme: "stationTests",
      workspace: "station.xcworkspace",
      devices: ["iPhone 8"],
      clean: true
    )
  end

  desc "Register devices"
  lane :reg do
    register_devices(devices: {
                    "Marko 6" => "2cc93059fe0e9cc7cd815128e032cdbecdde33cb",
                    "Marko 5s" => "ad7a30c543977fb7d88ade9b60c34acbc10fd707"
    })
    match(type: "development", force_for_new_devices: true)
    match(type: "adhoc", force_for_new_devices: true)
  end

  desc """
  Upload to firebase AppDistribution with options

  -group - testers group [alpha|beta]
  -scheme - [station|station_dev]

  fastlane upload_to_firebase group:AlphaTest scheme:station_dev
  """
  lane :upload_to_firebase do |options|
    BUILD_NUMBER = options[:build_number]
    UI.crash!('build_number parameter is required') unless BUILD_NUMBER
    SCHEME = options[:scheme]
    UI.crash!('scheme parameter is required') unless SCHEME
    SRC_ROOT = File.expand_path("#{ENV['PWD']}")

    if SCHEME == "station"
      PATH_TO_INFO_PLIST = "#{SRC_ROOT}/station/Resources/Plists/Info.plist"
    else
      PATH_TO_INFO_PLIST = "#{SRC_ROOT}/station/Resources/Plists/DevInfo.plist"
    end

    set_info_plist_value(path: PATH_TO_INFO_PLIST, key: 'CFBundleVersion', value: BUILD_NUMBER)

    configuration = SCHEME == "station" ? "Release" : "Debug"
    match(type: "adhoc", app_identifier: "com.ruuvi.station", readonly: true)
    match(type: "adhoc", app_identifier: "com.ruuvi.station.widgets", readonly: true)
    match(type: "adhoc", app_identifier: "com.ruuvi.station.intents", readonly: true)
    match(type: "adhoc", app_identifier: "com.ruuvi.station.pnservice", readonly: true)
    build_app(
      scheme: SCHEME,
      export_xcargs: "-allowProvisioningUpdates",
      configuration: configuration,
      output_directory: "./Build",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "com.ruuvi.station" => "match AdHoc com.ruuvi.station",
          "com.ruuvi.station.widgets" => "match AdHoc com.ruuvi.station.widgets",
          "com.ruuvi.station.intents" => "match AdHoc com.ruuvi.station.intents",
          "com.ruuvi.station.pnservice" => "match AdHoc com.ruuvi.station.pnservice"
        }
      }
    )

    changelog = changelog_from_git_commits(
      commits_count: 1,
      pretty: "%s",
      merge_commit_filtering: "only_include_merges"
    )
    last_pr_number = changelog[/\d+/]
    result = github_api(
      server_url: "https://api.github.com",
      http_method: "GET",
      path: "/repos/ruuvi/com.ruuvi.station.ios/pulls/" + last_pr_number
    )
    last_pr_title = result[:json]['title']
    last_pr_body = result[:json]['body']
    if last_pr_title.nil?
        last_pr_title = "No PR title found"
    end
    if last_pr_body.nil?
        last_pr_body = "No PR body found"
    end
    release_notes = last_pr_title + "\n\n" + last_pr_body

    firebase_app_distribution(
      app: ENV["GOOGLE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_REFRESH_TOKEN"],
      release_notes: release_notes,
      ipa_path: "./Build/" + SCHEME + ".ipa",
      groups: options[:group]
    )
    upload_symbols_to_crashlytics(
      dsym_path: "./Build/" + SCHEME + ".app.dSYM.zip",
      gsp_path: ENV["GSP_PATH"]
    )
    skip_docs
  end

  desc """
  Upload to TestFlight

  fastlane submit_to_testflight
  """
  lane :submit_to_testflight do |options|
    SCHEME = "station"
    configuration = "Release"

    BUILD_NUMBER = options[:build_number]
    UI.crash!('build_number parameter is required') unless BUILD_NUMBER
    SRC_ROOT = File.expand_path("#{ENV['PWD']}")
    PATH_TO_INFO_PLIST = "#{SRC_ROOT}/station/Resources/Plists/Info.plist"
    set_info_plist_value(path: PATH_TO_INFO_PLIST, key: 'CFBundleVersion', value: BUILD_NUMBER)

    match(type: "appstore", app_identifier: "com.ruuvi.station", readonly: true)
    match(type: "appstore", app_identifier: "com.ruuvi.station.widgets", readonly: true)
    match(type: "appstore", app_identifier: "com.ruuvi.station.intents", readonly: true)
    build_app(
      scheme: SCHEME,
      export_xcargs: "-allowProvisioningUpdates",
      configuration: configuration,
      output_directory: "./Build",
      export_options: {
        method: "appstore",
        provisioningProfiles: {
          "com.ruuvi.station" => "match AppStore com.ruuvi.station",
          "com.ruuvi.station.widgets" => "match AppStore com.ruuvi.station.widgets",
          "com.ruuvi.station.intents" => "match AppStore com.ruuvi.station.intents"
        }
      }
    )

    changelog = changelog_from_git_commits(
      commits_count: 1,
      pretty: "%s",
      merge_commit_filtering: "only_include_merges"
    )

    last_pr_number = changelog[/\d+/]
    result = github_api(
      server_url: "https://api.github.com",
      http_method: "GET",
      path: "/repos/ruuvi/com.ruuvi.station.ios/pulls/" + last_pr_number
    )

    last_pr_body = result[:json]['body']
    release_notes = last_pr_body

    upload_to_testflight(
      ipa: "./Build/" + SCHEME + ".ipa",
      changelog: release_notes
    )

    skip_docs
  end

  error do |lane, exception|
    remove_artifacts()
  end
end

after_all do
  remove_artifacts()
end

default_platform(:ios)

before_all do
  sh("rm", "-rf", "com.ruuvi.station.ios.keystore")
  sh("git", "clone", "git@github.com:ruuvi/com.ruuvi.station.ios.keystore.git")
  ENV["GSP_PATH"] = "./fastlane/com.ruuvi.station.ios.keystore/GoogleService-Info.plist"
  ENV["GOOGLE_APP_ID"] = get_info_plist_value(path: ENV["GSP_PATH"], key: "GOOGLE_APP_ID")
  ENV["FIREBASE_REFRESH_TOKEN"] = get_info_plist_value(path: "./fastlane/com.ruuvi.station.ios.keystore/CI.plist", key: "FIREBASE_REFRESH_TOKEN")
end

def remove_artifacts
  clean_build_artifacts()
  sh("rm", "-rf", "com.ruuvi.station.ios.keystore")
  sh("rm", "README.md")
  sh("rm", "report.xml")
end

platform :ios do
  def install_pods
    cocoapods(
      podfile: "Podfile",
      try_repo_update_on_error: true
    )
  end

  lane :test do
    install_pods()
    scan(
      scheme: "stationTests",
      workspace: "station.xcworkspace",
      devices: ["iPhone 8"],
      clean: true
    )
  end

  desc "Register devices"
  lane :reg do
    register_devices(devices: {
                    "Marko 6" => "2cc93059fe0e9cc7cd815128e032cdbecdde33cb",
                    "Marko 5s" => "ad7a30c543977fb7d88ade9b60c34acbc10fd707"
    })
    match(type: "development", force_for_new_devices: true)
    match(type: "adhoc", force_for_new_devices: true)
  end

  desc """
  Upload to firebase AppDistribution with options

  -group - testers group [alpha|beta]
  -notes - release notes for testers
  -scheme - [station|station_dev]

  fastlane ios upload_to_firebase group:alpha notes:'New feature' scheme:station_dev
  """
  lane :upload_to_firebase do |options|
    configuration = options[:scheme] == "station" ? "Release" : "Debug"
    match(type: "adhoc", app_identifier: "com.ruuvi.station", readonly: true)
    build_app(
      scheme: options[:scheme],
      export_xcargs: "-allowProvisioningUpdates",
      configuration: configuration,
      output_directory: "./Build",
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          "com.ruuvi.station" => "match AdHoc com.ruuvi.station"
        }
      }
    )
    firebase_app_distribution(
      app: ENV["GOOGLE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_REFRESH_TOKEN"],
      release_notes: "Release notes",
      ipa_path: "./Build/station.ipa",
      groups: options[:group]
    )
    upload_symbols_to_crashlytics(
      dsym_path: "./Build/station.app.dSYM.zip",
      gsp_path: ENV["GSP_PATH"]
    )
    skip_docs
  end

  error do |lane, exception|
    remove_artifacts()
  end
end

after_all do
  remove_artifacts()
end
